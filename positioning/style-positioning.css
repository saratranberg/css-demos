html{
    font-size: 1rem;
}
body{
    margin: 0;
    font-family: "source sans pro", helvetica, sans-serif;
    width: 100%;
}

/* z-index with sticky header --
notice sticky holds it's place in
the document and doesn't stick until
it reaches the top of the viewport 

add a z-index with a positive value
to fix the issue with it going under
other elements when scrolling.

*/
header{
    background-color: #eee;
    padding: 2rem 0;
    position: sticky;
    width: 100%;
    top: 0;
    left: 0;
}

#header-container{
    display: flex;
    justify-content: space-between;
}

#logo img{
    max-width: 100px;
    padding-left: 2rem;
}

nav ul li{
    display: inline-block;
    padding: 1rem 2rem 0 2rem;
}

nav ul li a{
    text-decoration: none;
    color: black;
    text-transform: uppercase;
    transition: all 0.3s ease-in-out;
}

nav ul li a:hover{
    color: teal;
}

main{
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
}

h1{
    text-align: center;
    font-size:3rem;
   /* position: absolute;*/
}

/* try positioning the h2 relative and
moving it with top, right, bottom and left.
notice how it's movement doesn't effect the 
position of other elements. */
main > h2{
    text-align: center;
    font-weight: 100;
 /* position: relative;
    top: 4rem; */
}

.kitties{
    margin-top: 3rem;
}

.kitties img{
    display: inline-block;
    max-width: 33%;
}

.content h2{
    text-align: center;
    position: relative;
    top: 2rem;
}

.content div{
    padding-top: 3rem;
    column-count: 2;
    column-gap: 2rem;
}

.content p:first-child{
    margin-top: 0;
}

figure{
    margin: 0;
}

figure img{
    max-width: 100%;
}

/* Remove the comment below to see how the fixed
button behaves. notice it stays to the same
position regardless of viewport size. it is
always visible */

/*.fixed{
    position: fixed;
    bottom: 0;
    right: 0;
    background: teal;
    color: white;
    text-align: center;
    padding: 1rem;
}*/

/* Position Absolute Example - in almost every
use-case, the element that is positioned as 
absolute will be inside a container that is 
positioned relative. The absolute element can
then be positioned in relation to the size
of it's parent with top, right, bottom and left */

.position-practice{
    padding-top: 3rem;
    position: relative;
}

figcaption{
    position: absolute;
    padding: 3rem;
    bottom: 2rem;
    right: 2rem;
    background-color: rgba(235,235,235,0.7);
}

/* relative positioning example with psuedoselector
if you aren't sure what this does, open in 
browser developer tools and uncheck the position
and/or the top: -1.8em value */
figcaption h3::before{
    content: url(eye-icon.png);
    width: 60px;
    height: 60px;
    display:block;
    margin: 0 auto;
    position: relative;
    top: -1.8rem;
}

figcaption a{
    background: teal;
    padding: 1rem;
    color: white;
    text-decoration: none;
    display:block;
    text-align: center;
}

figcaption a:hover{
    background: black;
    color: white;
}

/* demo sticky footer */
footer{
    background: black;
    padding: 2rem;
    color: white;
    text-align: center;
    margin-top: 3rem;
    /*position: sticky; 
    bottom: 0;*/
}

/* sticky image example*/

.sticky-image img{
    position: sticky;
    width: 300px;
    top: 0;
    display: block;
    margin: 0 auto;
    padding-top: 2rem;
    transform: scaleX(-1);
}

.sticky-image{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    width: 100%;
    margin-top: 3rem;
}

.sticky-image div{
    display: flex;
    flex-direction: column;
    flex: 1;
    padding-right: 3rem;
}